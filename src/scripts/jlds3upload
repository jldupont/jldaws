#!/usr/bin/env python
"""
    S3 Upload - automatically upload files to S3

    @author: Jean-Lou Dupont
"""
__version__="0.10"
import os, sys, argparse
op=os.path

try:
    if os.environ.get("DEVMODE", False):
        raise
    import jldaws #@UnusedImport
except:
    ### must be in dev mode then    
    this_dir=op.dirname(__file__)
    lib_path=op.abspath(op.join(this_dir, ".."))
    sys.path.insert(0, lib_path)
    import jldaws #@UnusedImport

########################################################################

DESC="""Upload local files to S3 - %s

-ifnr:  input filename regex (optional):  specification of a python regex for capturing input filename components
-okf:   output S3 key format string (optional)

E.g.  -ifnr '(.*)_(.*).xml'  -okf '%s-%s.xml'

""" % (__version__, "%s", "%s")
DEFAULTS={
          "polling_interval": 60
          ,"prefix": ""
          ,"num_files": 5
          }

def main():
    try:
        import jldaws.do_setup  #@UnusedImport
        import logging
        import jldaws.do_checks #@UnusedImport
        
        parser=argparse.ArgumentParser(description=DESC, fromfile_prefix_chars='@', formatter_class=argparse.RawTextHelpFormatter)
        parser.add_argument('-t',  dest='enable_simulate', action="store_true", help="Simulate processing", default=False)
        parser.add_argument('-bn', dest='bucket_name', type=str, help="Bucket name", required=True)
        parser.add_argument('-sp', dest='path_source', type=str, help="Path to monitor for new files",   required=True)
        parser.add_argument('-cp', dest='path_check',  type=str, help="Check path", default=None)
        parser.add_argument('-mp', dest='path_moveto', type=str, help="Path to move files upon success", default=None)
        parser.add_argument('-bs', dest='num_files',   type=int, help="Maximum number of files to process per interval", default=DEFAULTS["num_files"])
        parser.add_argument('-d',  dest='enable_delete', action="store_true", help="Delete file upon successful upload", default=False)
        parser.add_argument('-epr',dest='enable_progress_report', action="store_true", help="Enable progress report", default=False)
        parser.add_argument('-ext',dest='only_ext',      type=str, help="Only the specified extension", default=None)
        parser.add_argument('-wdf',dest='write_done',    action="store_true", help="Write '.done' file in source path", default=False)
        
        parser.add_argument('-e',  dest="propagate_error", help="Propagate S3 access errors", action="store_true", default=False)        
        parser.add_argument('-r',  dest="prefix", help="Prefix", type=str, action="store", default=DEFAULTS["prefix"])

        parser.add_argument('-p',  dest="polling_interval", type=int, action="store", help="Polling interval (seconds)", default=DEFAULTS["polling_interval"])
        
        parser.add_argument('-ifnr', dest="filename_input_regex",   type=str, help="Input filename regex", default=None)
        parser.add_argument('-okf', dest="key_output_format", type=str, help="Output S3 key format", default=None)
        
        from jldaws.script_s3upload import run
        from jldaws.tools_sys import process_command_line
        args=process_command_line(parser)
        run(**args)

    except KeyboardInterrupt:
        logging.info("..Exiting")
        sys.exit(0)##no probs
        
    except Exception,e:
        logging.error(str(e))
        sys.exit(1)
        
sys.exit(main())
