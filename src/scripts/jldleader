#!/usr/bin/env python
"""
    jldleader - Leader election protocol

    @author: Jean-Lou Dupont
"""
__version__="0.1"
import os, sys, argparse
op=os.path

try:
    import jldaws
except:
    ### must be in dev mode then    
    this_dir=op.dirname(__file__)
    lib_path=op.abspath(op.join(this_dir, ".."))
    sys.path.insert(0, lib_path)
    import jldaws

########################################################################

DESC="Leader election protocol manager - %s" % __version__
DEFAULTS={
          "polling_interval": 10
          ,"proto_n": 2
          ,"proto_m": 4
          }

from jldaws.tools_sys import SignalTerminate

def main():
    try:
        import jldaws.do_setup
        import logging
        import jldaws.do_checks
        from jldaws.tools_sys import dnorm
        from jldaws.tools_logging import info_dump
        
        parser=argparse.ArgumentParser(description=DESC, fromfile_prefix_chars='@', formatter_class=argparse.RawTextHelpFormatter)
        parser.add_argument('-dp', dest='dst_path', action="store", type=str, help="Destination path to write election result", required=True)
        parser.add_argument('-id', dest='node_id',  type=str, help="Node id", default=None)
        
        parser.add_argument('-dq', dest='delete_queue',  action="store_true", help="Force delete SQS queue on exit", default=False)
        parser.add_argument('-fd', dest='force_delete',  action="store_true", help="Force delete 'dst_path' upon start", default=False)
        
        parser.add_argument('-tn', dest='topic_name',  action="store", type=str, help="Topic name")
        parser.add_argument('-qn', dest='queue_name',  action="store",type=str, help="Private queue name")
        
        parser.add_argument('-proto_n', dest='proto_n',  action="store",type=int, help="Protocol - parameter 'n'", default=DEFAULTS["proto_n"])
        parser.add_argument('-proto_m', dest='proto_m',  action="store",type=int, help="Protocol - parameter 'm'", default=DEFAULTS["proto_m"])
        
        #parser.add_argument('-ms', dest='mod_sub',  type=str, help="Python module for 'subscribe' interface")
        #parser.add_argument('-mp', dest='mod_pub',  type=str, help="Python module for 'publish' interface")
        
        parser.add_argument('-force',dest="force", action="store_true", help="Force 'leader'", default=False)
        
        parser.add_argument('-p',   dest="polling_interval", type=int, action="store", help="Polling interval (seconds)", default=DEFAULTS["polling_interval"])        
        args=parser.parse_args()
        
        info_dump(vars(args), 20)
        
        from jldaws.script_leader import run
        run(**dnorm(vars(args)))

    except SignalTerminate:
        logging.warning("... Terminating")
        sys.exit(0)

    except KeyboardInterrupt:
        logging.info("... Exiting")
        sys.exit(0)##no probs
        
    except Exception,e:
        logging.error(str(e))
        sys.exit(1)
        
sys.exit(main())
